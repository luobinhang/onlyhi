<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.onlyhi.repository.onlyhiedu.mapper.OrdersMapper" >
  <resultMap id="BaseResultMap" type="com.onlyhi.repository.onlyhiedu.mbg_po.Orders" >
    <id column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="order_no" property="orderNo" jdbcType="VARCHAR" />
    <result column="course_name" property="courseName" jdbcType="VARCHAR" />
    <result column="course_id" property="courseId" jdbcType="BIGINT" />
    <result column="class_hour" property="classHour" jdbcType="INTEGER" />
    <result column="total_price" property="totalPrice" jdbcType="DOUBLE" />
    <result column="account_payable" property="accountPayable" jdbcType="DOUBLE" />
    <result column="already_pay" property="alreadyPay" jdbcType="DOUBLE" />
    <result column="pending_pay" property="pendingPay" jdbcType="DOUBLE" />
    <result column="subtotal" property="subtotal" jdbcType="DOUBLE" />
    <result column="total" property="total" jdbcType="DOUBLE" />
    <result column="order_time" property="orderTime" jdbcType="TIMESTAMP" />
    <result column="pay_status" property="payStatus" jdbcType="INTEGER" />
    <result column="pay_method" property="payMethod" jdbcType="VARCHAR" />
    <result column="contact_id" property="contactId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    order_id, order_no, course_name, course_id, class_hour, total_price, account_payable, 
    already_pay, pending_pay, subtotal, total, order_time, pay_status, pay_method, contact_id, 
    user_id, create_date, update_date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.OrdersExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from orders
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from orders
    where order_id = #{orderId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.OrdersExample" >
    delete from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.Orders" >
    insert into orders (order_id, order_no, course_name, 
      course_id, class_hour, total_price, 
      account_payable, already_pay, pending_pay, 
      subtotal, total, order_time, 
      pay_status, pay_method, contact_id, 
      user_id, create_date, update_date
      )
    values (#{orderId,jdbcType=BIGINT}, #{orderNo,jdbcType=VARCHAR}, #{courseName,jdbcType=VARCHAR}, 
      #{courseId,jdbcType=BIGINT}, #{classHour,jdbcType=INTEGER}, #{totalPrice,jdbcType=DOUBLE}, 
      #{accountPayable,jdbcType=DOUBLE}, #{alreadyPay,jdbcType=DOUBLE}, #{pendingPay,jdbcType=DOUBLE}, 
      #{subtotal,jdbcType=DOUBLE}, #{total,jdbcType=DOUBLE}, #{orderTime,jdbcType=TIMESTAMP}, 
      #{payStatus,jdbcType=INTEGER}, #{payMethod,jdbcType=VARCHAR}, #{contactId,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.Orders" useGeneratedKeys="true" keyProperty="orderId">
    insert into orders
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="orderNo != null" >
        order_no,
      </if>
      <if test="courseName != null" >
        course_name,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="classHour != null" >
        class_hour,
      </if>
      <if test="totalPrice != null" >
        total_price,
      </if>
      <if test="accountPayable != null" >
        account_payable,
      </if>
      <if test="alreadyPay != null" >
        already_pay,
      </if>
      <if test="pendingPay != null" >
        pending_pay,
      </if>
      <if test="subtotal != null" >
        subtotal,
      </if>
      <if test="total != null" >
        total,
      </if>
      <if test="orderTime != null" >
        order_time,
      </if>
      <if test="payStatus != null" >
        pay_status,
      </if>
      <if test="payMethod != null" >
        pay_method,
      </if>
      <if test="contactId != null" >
        contact_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="orderNo != null" >
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="courseName != null" >
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=BIGINT},
      </if>
      <if test="classHour != null" >
        #{classHour,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="accountPayable != null" >
        #{accountPayable,jdbcType=DOUBLE},
      </if>
      <if test="alreadyPay != null" >
        #{alreadyPay,jdbcType=DOUBLE},
      </if>
      <if test="pendingPay != null" >
        #{pendingPay,jdbcType=DOUBLE},
      </if>
      <if test="subtotal != null" >
        #{subtotal,jdbcType=DOUBLE},
      </if>
      <if test="total != null" >
        #{total,jdbcType=DOUBLE},
      </if>
      <if test="orderTime != null" >
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payMethod != null" >
        #{payMethod,jdbcType=VARCHAR},
      </if>
      <if test="contactId != null" >
        #{contactId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.OrdersExample" resultType="java.lang.Integer" >
    select count(*) from orders
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update orders
    <set >
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.orderNo != null" >
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.courseName != null" >
        course_name = #{record.courseName,jdbcType=VARCHAR},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=BIGINT},
      </if>
      <if test="record.classHour != null" >
        class_hour = #{record.classHour,jdbcType=INTEGER},
      </if>
      <if test="record.totalPrice != null" >
        total_price = #{record.totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.accountPayable != null" >
        account_payable = #{record.accountPayable,jdbcType=DOUBLE},
      </if>
      <if test="record.alreadyPay != null" >
        already_pay = #{record.alreadyPay,jdbcType=DOUBLE},
      </if>
      <if test="record.pendingPay != null" >
        pending_pay = #{record.pendingPay,jdbcType=DOUBLE},
      </if>
      <if test="record.subtotal != null" >
        subtotal = #{record.subtotal,jdbcType=DOUBLE},
      </if>
      <if test="record.total != null" >
        total = #{record.total,jdbcType=DOUBLE},
      </if>
      <if test="record.orderTime != null" >
        order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payStatus != null" >
        pay_status = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.payMethod != null" >
        pay_method = #{record.payMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.contactId != null" >
        contact_id = #{record.contactId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update orders
    set order_id = #{record.orderId,jdbcType=BIGINT},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      course_name = #{record.courseName,jdbcType=VARCHAR},
      course_id = #{record.courseId,jdbcType=BIGINT},
      class_hour = #{record.classHour,jdbcType=INTEGER},
      total_price = #{record.totalPrice,jdbcType=DOUBLE},
      account_payable = #{record.accountPayable,jdbcType=DOUBLE},
      already_pay = #{record.alreadyPay,jdbcType=DOUBLE},
      pending_pay = #{record.pendingPay,jdbcType=DOUBLE},
      subtotal = #{record.subtotal,jdbcType=DOUBLE},
      total = #{record.total,jdbcType=DOUBLE},
      order_time = #{record.orderTime,jdbcType=TIMESTAMP},
      pay_status = #{record.payStatus,jdbcType=INTEGER},
      pay_method = #{record.payMethod,jdbcType=VARCHAR},
      contact_id = #{record.contactId,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.Orders" >
    update orders
    <set >
      <if test="orderNo != null" >
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="courseName != null" >
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="classHour != null" >
        class_hour = #{classHour,jdbcType=INTEGER},
      </if>
      <if test="totalPrice != null" >
        total_price = #{totalPrice,jdbcType=DOUBLE},
      </if>
      <if test="accountPayable != null" >
        account_payable = #{accountPayable,jdbcType=DOUBLE},
      </if>
      <if test="alreadyPay != null" >
        already_pay = #{alreadyPay,jdbcType=DOUBLE},
      </if>
      <if test="pendingPay != null" >
        pending_pay = #{pendingPay,jdbcType=DOUBLE},
      </if>
      <if test="subtotal != null" >
        subtotal = #{subtotal,jdbcType=DOUBLE},
      </if>
      <if test="total != null" >
        total = #{total,jdbcType=DOUBLE},
      </if>
      <if test="orderTime != null" >
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null" >
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payMethod != null" >
        pay_method = #{payMethod,jdbcType=VARCHAR},
      </if>
      <if test="contactId != null" >
        contact_id = #{contactId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.onlyhi.repository.onlyhiedu.mbg_po.Orders" >
    update orders
    set order_no = #{orderNo,jdbcType=VARCHAR},
      course_name = #{courseName,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=BIGINT},
      class_hour = #{classHour,jdbcType=INTEGER},
      total_price = #{totalPrice,jdbcType=DOUBLE},
      account_payable = #{accountPayable,jdbcType=DOUBLE},
      already_pay = #{alreadyPay,jdbcType=DOUBLE},
      pending_pay = #{pendingPay,jdbcType=DOUBLE},
      subtotal = #{subtotal,jdbcType=DOUBLE},
      total = #{total,jdbcType=DOUBLE},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      pay_status = #{payStatus,jdbcType=INTEGER},
      pay_method = #{payMethod,jdbcType=VARCHAR},
      contact_id = #{contactId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
</mapper>